name: tf.keras.layers.Conv3DTranspose
needed:
  - filters
  - kernel_size
constraints:
  filters:
    descp: Integer, the dimensionality of the output space.
    dtype: 
      - int
    structure: 
      - none
  kernel_size:
    descp: An integer or tuple/list of 3 integers, specifying the depth, height and width of the 3D convolution window.
    dtype: 
      - int
    structure:
      - none
      - list
    addition:
      - (`kernel_size.structure` == list) => `kernel_size.length` == 3
  strides:
    default: [1, 1, 1]
    descp: An integer or tuple/list of 3 integers, specifying the strides of the convolution along the depth, height, and width.
    dtype: 
      - int
    structure:
      - none
      - list
    addition:
      - (`strides.structure` == list) => `strides.length` == 3
  padding:
    default: valid
    descp: One of "valid" or "same".
    dtype: 
      - string
    enum:
      - valid
      - same
    structure: none
  output_padding:
    default: None
    descp: An integer or tuple/list of 3 integers, specifying the amount of padding along the depth, height, and width.
    dtype: int
    structure:
      - none
      - list
    addition:
      - (`output_padding.structure` == list) => `output_padding.length` == 3
  data_format:
    default: channels_last
    descp: A string, one of channels_last (default) or channels_first.
    dtype: 
      - string
    structure: 
      - none
  dilation_rate:
    default: [1, 1, 1]
    descp: An integer or tuple/list of 3 integers, specifying the dilation rate to use for dilated convolution.
    dtype: int
    structure:
      - none
      - list
    addition:
      - (`dilation_rate.structure` == list) => `dilation_rate.length` == 3
  activation:
    default: None
    descp: Activation function to use.
    dtype: 
      - string
    structure: 
      - none
  use_bias:
    default: True
    descp: Boolean, whether the layer uses a bias vector.
    dtype: 
      - bool
    structure: none
  kernel_initializer:
    default: glorot_uniform
    descp: Initializer for the kernel weights matrix.
    dtype: 
      - string
    structure: 
      - none
  bias_initializer:
    default: zeros
    descp: Initializer for the bias vector.
    dtype: 
      - string
    structure: 
      - none
  kernel_regularizer:
    default: None
    descp: Regularizer function applied to the kernel weights matrix.
    dtype: 
      - string
    structure: 
      - none
  bias_regularizer:
    default: None
    descp: Regularizer function applied to the bias vector.
    dtype: 
      - string
    structure: 
      - none
  activity_regularizer:
    default: None
    descp: Regularizer function applied to the output of the layer.
    dtype: 
      - string
    structure: 
      - none
  kernel_constraint:
    default: None
    descp: Constraint function applied to the kernel matrix.
    dtype: 
      - string
    structure: 
      - none
  bias_constraint:
    default: None
    descp: Constraint function applied to the bias vector.
    dtype: 
      - string
    structure: 
      - none
returns:
  descp: A tensor of rank 5 representing activation(conv3dtranspose(inputs, kernel) + bias).
  ndim: 
    - 5
  dtype: 
    - float
  structure: 
    - tensor