name: tf.nn.conv1d
needed:
  - input
  - filters
  - stride
  - padding
constraints:
  input:
    descp: A Tensor of rank at least 3. Must be of type `float16`, `float32`, or `float64`.
    dtype:
      - float16
      - float32
      - float64
    structure:
      - tf.tensor
    ndim:
      - >= 3

  filters:
    descp: A Tensor of rank at least 3. Must have the same type as `input`.
    dtype:
      - `input.dtype`
    structure:
      - tf.tensor
    ndim:
      - >= 3

  stride:
    descp: An int or list of `ints` that has length `1` or `3`. The number of entries by which the filter is moved right at each step.
    dtype:
      - int
    structure:
      - int
      - list
    addition:
      - `stride.length` == 1 or `stride.length` == 3

  padding:
    descp: 'SAME' or 'VALID'.
    dtype:
      - string
    enum:
      - SAME
      - VALID
    structure:
      - none

  data_format:
    default: NWC
    descp: An optional `string` from "NWC", "NCW". Defaults to "NWC", the data is stored in the order of `batch_shape + [in_width, in_channels]`. The "NCW" format stores data as `batch_shape + [in_channels, in_width]`.
    dtype:
      - string
    enum:
      - NWC
      - NCW
    structure:
      - none

  dilations:
    default: 1
    descp: An int or list of `ints` that has length `1` or `3` which defaults to 1. The dilation factor for each dimension of input. If set to k > 1, there will be k-1 skipped cells between each filter element on that dimension. Dilations in the batch and depth dimensions must be 1.
    dtype:
      - int
    structure:
      - int
      - list
    addition:
      - `dilations.length` == 1 or `dilations.length` == 3

  name:
    descp: A name for the operation (optional).
    dtype:
      - string
    optional: true
    structure:
      - none

returns:
  descp: A `Tensor`. Has the same type as input.
  dtype:
    - `input.dtype`
  structure:
    - tf.tensor

raises:
  - ValueError: if `data_format` is invalid.
"""
name: tf.nn.conv3d_transpose
aliases:
  - nn.conv3d_transpose_v2
needed:
  - input
  - filters
  - output_shape
  - strides
constraints:
  input:
    descp: A 5-D Tensor of type float and shape [batch, depth, height, width, in_channels] for NDHWC data format or [batch, in_channels, depth, height, width] for NCDHW data format.
    dtype:
      - float
    ndim:
      - 5
    structure:
      - tf.tensor
  filters:
    descp: A 5-D Tensor with the same type as input and shape [depth, height, width, output_channels, in_channels].
    dtype:
      - float
    ndim:
      - 5
    structure:
      - tf.tensor
  output_shape:
    descp: A 1-D Tensor representing the output shape of the deconvolution op.
    ndim:
      - 1
    structure:
      - tf.tensor
  strides:
    descp: An int or list of ints that has length 1, 3, or 5. The stride of the sliding window for each dimension of input.
    dtype:
      - int
    structure:
      - int
      - list
  padding:
    default: SAME
    descp: Either 'VALID' or 'SAME'. The padding algorithm.
    dtype:
      - string
    enum:
      - VALID
      - SAME
    structure:
      - none
  data_format:
    default: NDHWC
    descp: A string. 'NDHWC' and 'NCDHW' are supported.
    dtype:
      - string
    enum:
      - NDHWC
      - NCDHW
    structure:
      - none
  dilations:
    default: None
    descp: An int or list of ints that has length 1, 3, or 5. The dilation factor for each dimension of input.
    dtype:
      - int
    addition:
      - (`dilations.structure` == list) => `dilations.length` == 1 or `dilations.length` == 3 `dilations.length` == 5
    structure:
      - int
      - list
  name:
    default: None
    descp: Optional name for the returned tensor.
    dtype:
      - string
    structure:
      - none
returns:
  descp: A Tensor with the same type as input.
  dtype:
    - float
  ndim:
    - 5
  structure:
    - tf.tensor
"""
name: tf.nn.embedding_lookup
needed:
  - params
  - ids
constraints:
  params:
    descp: A single tensor representing the complete embedding tensor, or a list of tensors all of the same shape except for the first dimension, representing sharded embedding tensors following "div" partition strategy.
    dtype:
      - float16
      - float32
      - float64
      - int32
      - int64
    structure:
      - tf.tensor
      - tensors

  ids:
    descp: A `Tensor` with type `int32` or `int64` containing the ids to be looked up in `params`.
    dtype:
      - int32
      - int64
    structure:
      - tf.tensor

  max_norm:
    descp: If not `None`, each embedding is clipped if its l2-norm is larger than this value.
    dtype:
      - float
      - None
    structure:
      - none

  name:
    descp: A name for the operation (optional).
    dtype:
      - string
    structure:
      - none

returns:
  descp: A `Tensor` with the same type as the tensors in `params`.
  dtype:
    - `params.dtype`
  structure:
    - tf.tensor

raises:
  - ValueError: If `params` is empty.
"""
name: tf.nn.pool
needed:
  - input
  - window_shape
  - pooling_type
constraints:
  data_format:
    default: None
    descp: A string or None. Specifies whether the channel dimension of the `input` and output is the last dimension (default, or if `data_format` does not start with "NC"), or the second dimension (if `data_format` starts with "NC"). For N=1, the valid values are "NWC" (default) and "NCW". For N=2, the valid values are "NHWC" (default) and "NCHW". For N=3, the valid values are "NDHWC" (default) and "NCDHW".
    enum:
      - NWC
      - NCW
      - NHWC
      - NCHW
      - NDHWC
      - NCDHW
    dtype:
      - string
    structure:
      - none
    addition:
      - ({input_spatial_shape.length} ==1 ) => `data_format` == NWC or `data_format` == NCW
      - ({input_spatial_shape.length} ==2 ) => `data_format` == NHWC or `data_format` == NCHW
      - ({input_spatial_shape.length} ==3 ) => `data_format` == NDHWC or `data_format` == NCDHW
  dilations:
    default: None
    descp: Optional.  Dilation rate.  List of N ints >= 1. Defaults to [1]*N.  If
      any value of dilation_rate is > 1, then all values of strides must be 1.
    dtype:
      - int
    structure:
      - list
    addition:
      - `dilations.length` == {input_spatial_shape.length}
  input:
    descp: Tensor of rank N+2, of shape `[batch_size] + input_spatial_shape + [num_channels]`
      if data_format does not start with "NC" (default), or`[batch_size, num_channels]
      + input_spatial_shape` if data_format starts with "NC".  Pooling happens over
      the spatial dimensions only.
    ndim:
      - {input_spatial_shape.length} + 2
    shape:
      - (`data_format` != 'NC*') => ([batch_size] , {input_spatial_shape} , [num_channels])
      - (`data_format` == 'NC*') => ([batch_size , num_channels] , {input_spatial_shape})
    structure:
      - tf.tensor
  name:
    default: None
    descp: Optional. Name of the op.
    dtype:
      - string
  padding:
    default: VALID
    descp: The padding algorithm, must be "SAME" or "VALID". Defaults to "SAME". See
      the "returns" section of `tf.nn.convolution` for details.
    enum:
      - SAME
      - VALID
    dtype:
      - string
    structure:
      - none
  pooling_type:
    descp: Specifies pooling operation, must be "AVG" or "MAX".
    enum:
      - AVG
      - MAX
    dtype:
      - string
    structure:
      - none
  strides:
    default: None
    descp: Optional. Sequence of N ints >= 1.  Defaults to [1]*N. If any value of
      strides is > 1, then all values of dilation_rate must be 1.
    dtype:
      - int
    structure:
      - list
    addition:
      - `strides.length` == {input_spatial_shape.length}
      - all values >= 1
  window_shape:
    descp: Sequence of N ints >= 1.
    dtype:
      - int
    structure:
      - list
    addition:
      - `window_shape.length` == {input_spatial_shape.length}
      - `window_shape[i]` >= 1
returns:
  descp: Tensor of rank N+2, of shape [batch_size] + output_spatial_shape + [num_channels] if data_format is None or does not start with "NC", or [batch_size, num_channels] + output_spatial_shape if data_format starts with "NC", where output_spatial_shape depends on the value of padding If padding = "SAME" output_spatial_shape[i] = ceil(input_spatial_shape[i] / strides[i])"
  structure:
    - tf.tensor
  ndim:
    - {input_spatial_shape.length} + 2
  shape:
    - (`data_format` != 'NC*') => ([batch_size] , {output_spatial_shape} , [num_channels])
    - (`data_format` == 'NC*') => ([batch_size] , [num_channels] , {output_spatial_shape})
"""
