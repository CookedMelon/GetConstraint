I will give you an api description copy. Generate type constraints for each parameter and return value. 
The constraint needs to describe the dtype, dim, shape, struct, default value, and rank of the parameter.
Among them, the dtype needs to be selected from the following types, if there are restrictions on types, you need to list the supported types

 - float64  - tf.qint8  - tf.int64  - tf.float  - qint8  - tf.float32  - tf.qint16  - tf.bfloat16  - tf.complex128  - bool  - ints  - complex128  - float32  - tf.dtypes  - floats  - uint  - tf.uint64  - half  - quint16  - float16  - tf.uint8  - uint32  - tf.quint16  - tf.uint  - qint16  - double  - tf.boolean  - tf.dtype  - tf.int  - numeric  - tf.bool  - str  - quint8  - tf.int32  - float  - strings  - tf.half  - uint64  - string  - tf.str  - tf.complex  - boolean  - int64  - complex  - uint8  - tf.string  - bfloat16  - int8  - tf.uint16  - integer  - tf.float16  - floating  - tf.quint8  - tf.uint32  - int  - tf.qint32  - tf.complex64  - qint32  - int16  - complex64  - uint16  - tf.int16  - int32  - integers  - tf.float64  - tf.int8

the structure should be selected from the following types

  - list  - lists  - array  - arrays  - tuple  - dict  - dictionary  - iterable  - sequence  - ndarray  - array_like  - vector  - vectors  - tf.sparsetensor  - tf.tensor  - sparsetensor  - tensors  - tensor

You should also give each parameter's descp please notice that you only need to copy the description exactly as it is.
Parameters such as tensor shape can be represented by variables, using [] to represent a list of numbers and not using [] to represent a single number.
Use `` to indicate other input parameters of the api
When parameter constraints occur, the conditional branch can be expressed by the conditional expression '=>'
You should also explain which api parameters are required
Finally give me an yaml in this format
Add additional conditions under addition

You should get the extracted text is like this

```
name: tf.nn.collapse_repeated
dependency: 
  - labels
  - seq_length

constraints:
  labels:
    descp: Tensor of shape [batch, max value in seq_length].
    dtype:
      - tf.tensor
    structure:
      - shape: [batch, max value in seq_length]

  seq_length:
    descp: Tensor of shape [batch], sequence length of each batch element.
    dtype:
      - tf.tensor
    structure:
      - shape: [batch]

  name:
    default: "collapse_repeated_labels"
    descp: A name for this `Op`.
    dtype:
      - string

returns:
  descp: A tuple `(collapsed_labels, new_seq_length)` where collapsed_labels is a Tensor of shape [batch, max_seq_length] with repeated labels collapsed and padded to max_seq_length, and new_seq_length is an int tensor of shape [batch] with new sequence lengths.
  dtype:
    - tf.tensor
    - int tensor
  structure:
    - shape: [batch, max_seq_length]
    - shape: [batch]
```

If you learned how to generate the yaml I want. Only tell me "yes" directly, then I will give you what api I want you to generate. After that, please generate yaml in the format above directly without any other instructions.